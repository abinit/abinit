!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_ialltoallv_dp2d
!! NAME
!!  xmpi_ialltoallv_dp2d
!!
!! FUNCTION
!!  This module contains functions calling the non-blocking MPI routine IALLTOALLV
!!  xmpi_ialltoallv is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2024 ABINIT group (MG)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! INPUTS
!!  xval= buffer array
!!  sendcnts= number of sent elements
!!  sdispls= postions of values sent by the processor
!!  rdispls= positions of values received by the processor
!!  recvcnts= number of received elements
!!  comm= MPI communicator
!!
!! OUTPUT
!!  request= MPI request
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_ialltoallv
!!
!! SOURCE

subroutine xmpi_ialltoallv_dp2d(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,request)

!Arguments-------------------------
 real(dp) ABI_ASYNC, intent(in) :: xval(:,:)
 real(dp) ABI_ASYNC, intent(inout) :: recvbuf(:,:)
 integer  ABI_ASYNC, intent(in) :: sendcnts(:),sdispls(:),rdispls(:),recvcnts(:)
 integer ,intent(in) :: comm
 integer ,intent(out) :: request

!Local variables-------------------
 integer :: ierr
 
! *********************************************************************

#ifdef HAVE_MPI_IALLTOALLV
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_IALLTOALLV(xval,sendcnts,sdispls,MPI_DOUBLE_PRECISION,recvbuf,&
     recvcnts,rdispls,MPI_DOUBLE_PRECISION,comm,request,ierr)
   xmpi_count_requests = xmpi_count_requests + 1
   return
 end if
#endif

 ! Call the blocking version and return null request.
 call xmpi_alltoallv(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,ierr)
 request = xmpi_request_null

end subroutine xmpi_ialltoallv_dp2d
!!***

!!****f* ABINIT/xmpi_ialltoallv_int2d
!! NAME
!!  xmpi_ialltoallv_int2d
!!
!! FUNCTION
!!  Sends data from all to all processes.
!!  Target: two-dimensional integer arrays.
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_ialltoallv
!!
!! SOURCE

subroutine xmpi_ialltoallv_int2d(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,request)

!Arguments-------------------------
 integer ABI_ASYNC, intent(in) :: xval(:,:)
 integer ABI_ASYNC, intent(inout) :: recvbuf(:,:)
 integer ABI_ASYNC, intent(in) :: sendcnts(:),sdispls(:),rdispls(:),recvcnts(:)
 integer,intent(in) :: comm
 integer,intent(out) :: request

!Local variables-------------------
 integer :: ierr

! *********************************************************************

#ifdef HAVE_MPI_IALLTOALLV
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_IALLTOALLV(xval,sendcnts,sdispls,MPI_INTEGER,recvbuf,&
    recvcnts,rdispls,MPI_INTEGER,comm,request,ierr)
   xmpi_count_requests = xmpi_count_requests + 1
   return
 end if
#endif

 ! Call the blocking version and return null request.
 call xmpi_alltoallv(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,ierr)
 request = xmpi_request_null

end subroutine xmpi_ialltoallv_int2d
!!***

!!****f* ABINIT/xmpi_ialltoallv_dp1d2
!! NAME
!!  xmpi_ialltoallv_dp1d2
!!
!! FUNCTION
!!  Sends data from all to all processes.
!!  Target: double precision one-dimensional arrays.
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_ialltoallv
!!
!! SOURCE

subroutine xmpi_ialltoallv_dp1d2(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,request)

!Arguments-------------------------
 real(dp) ABI_ASYNC, intent(in) :: xval(:)
 real(dp) ABI_ASYNC, intent(inout) :: recvbuf(:)
 integer ABI_ASYNC, intent(in) :: sendcnts(:),sdispls(:),recvcnts(:),rdispls(:)
 integer,intent(in) :: comm
 integer,intent(out) :: request

!Local variables-------------------
 integer :: ierr

! *********************************************************************

#ifdef HAVE_MPI_IALLTOALLV
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_IALLTOALLV(xval,sendcnts,sdispls,MPI_DOUBLE_PRECISION,recvbuf,&
    recvcnts,rdispls,MPI_DOUBLE_PRECISION,comm,request,ierr)
   xmpi_count_requests = xmpi_count_requests + 1
   return
 end if
#endif

 ! Call the blocking version and return null request.
 call xmpi_alltoallv(xval,sendcnts,sdispls,recvbuf,recvcnts,rdispls,comm,ierr)
 request = xmpi_request_null

end subroutine xmpi_ialltoallv_dp1d2
!!***
