!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_gather
!! NAME
!!  xmpi_gather
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine,
!!  if we compile the code using the MPI CPP flags.
!!  xmpi_gather is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2024 ABINIT group (MT)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! SOURCE

!!***

!!****f* ABINIT/xmpi_gather_int
!! NAME
!!  xmpi_gather_int
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: one-dimensional integer arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_int(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 integer, DEV_CONTARRD intent(in) :: xval(:)
 integer, DEV_CONTARRD intent(inout) :: recvbuf(:)
 integer,intent(in) :: root,comm
 integer,intent(out) :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_INTEGER,recvbuf,recvcount,MPI_INTEGER,root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif
end subroutine xmpi_gather_int
!!***

!!****f* ABINIT/xmpi_gather_int2d
!! NAME
!!  xmpi_gather_int2d
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: two-dimensional integer arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_int2d(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 integer, DEV_CONTARRD intent(in) :: xval(:,:)
 integer, DEV_CONTARRD intent(inout) :: recvbuf(:,:)
 integer,intent(in) :: root,comm
 integer,intent(out) :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_INTEGER,recvbuf,recvcount,MPI_INTEGER,root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif
end subroutine xmpi_gather_int2d
!!***

!!****f* ABINIT/xmpi_gather_dp
!! NAME
!!  xmpi_gather_dp
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: one-dimensional real arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_dp(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 real(dp), DEV_CONTARRD intent(in) :: xval(:)
 real(dp), DEV_CONTARRD intent(inout)   :: recvbuf(:)
 integer,intent(in) :: root,comm
 integer,intent(out) :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_DOUBLE_PRECISION,recvbuf,recvcount,MPI_DOUBLE_PRECISION,&
&   root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif
end subroutine xmpi_gather_dp
!!***

!!****f* ABINIT/xmpi_gather_dp2d
!! NAME
!!  xmpi_gather_dp2d
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: two-dimensional real arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_dp2d(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 real(dp), DEV_CONTARRD intent(in) :: xval(:,:)
 real(dp), DEV_CONTARRD intent(inout) :: recvbuf(:,:)
 integer,intent(in) :: root,comm
 integer,intent(out)   :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_DOUBLE_PRECISION,recvbuf,recvcount,MPI_DOUBLE_PRECISION,&
&   root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif
end subroutine xmpi_gather_dp2d
!!***

!!****f* ABINIT/xmpi_gather_dp3d
!! NAME
!!  xmpi_gather_dp3d
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: three-dimensional real arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_dp3d(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 real(dp), DEV_CONTARRD intent(in) :: xval(:,:,:)
 real(dp), DEV_CONTARRD intent(inout) :: recvbuf(:,:,:)
 integer,intent(in) :: root,comm
 integer,intent(out) :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_DOUBLE_PRECISION,recvbuf,recvcount,MPI_DOUBLE_PRECISION,&
&   root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif

end subroutine xmpi_gather_dp3d
!!***

!!****f* ABINIT/xmpi_gather_dp4d
!! NAME
!!  xmpi_gather_dp4d
!!
!! FUNCTION
!!  Gathers data from all tasks and delivers it to all.
!!  Target: four-dimensional real arrays.
!!
!! INPUTS
!!  xval= buffer array
!!  sendcont= number of sent elements
!!  recvcount= number of received elements
!!  root= rank of receiving process
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  recvbuf= received buffer
!!
!! SOURCE

subroutine xmpi_gather_dp4d(xval,sendcount,recvbuf,recvcount,root,comm,ier)

!Arguments-------------------------
 integer,intent(in) :: sendcount,recvcount
 real(dp), DEV_CONTARRD intent(in) :: xval(:,:,:,:)
 real(dp), DEV_CONTARRD intent(inout) :: recvbuf(:,:,:,:)
 integer,intent(in) :: root,comm
 integer,intent(out) :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_gather(xval,sendcount,MPI_DOUBLE_PRECISION,recvbuf,recvcount,MPI_DOUBLE_PRECISION,&
&   root,comm,ier)
 else if (comm == MPI_COMM_SELF) then
   recvbuf=xval
 end if
#else
 recvbuf=xval
#endif

end subroutine xmpi_gather_dp4d
!!***
