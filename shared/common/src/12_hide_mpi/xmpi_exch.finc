!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_exch_int1d
!! NAME
!!  xmpi_exch_int1d
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine,
!!  if we compile the code using the MPI CPP flags.
!!  xmpi_exch is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2024 ABINIT group (MB,MT)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! NOTE
!!  The tag conforms to the MPI request that the tag is lower than 32768,
!!    by using a modulo call.
!!
!! SOURCE

!--------------------------------------------------------------------

subroutine xmpi_exch_int1d(vsend,n1,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,n1
 integer, DEV_CONTARRD intent(in) :: vsend(:)
 integer, DEV_CONTARRD intent(inout) :: vrecv(:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: tag,me
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.n1==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag,xmpi_tag_ub)

 if (recever==me) then
   call MPI_RECV(vrecv,n1,MPI_INTEGER,sender,tag,comm,statux,ier)
 end if
 if (sender==me) then
   call MPI_SEND(vsend,n1,MPI_INTEGER,recever,tag,comm,ier)
 end if
#endif

end subroutine xmpi_exch_int1d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_int2d
!! NAME
!!  xmpi_exch_int2d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: two-dimensional integer arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_int2d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 integer, DEV_CONTARRD intent(in) :: vsend(:,:)
 integer, DEV_CONTARRD intent(inout) :: vrecv(:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: tag,me
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 if (recever==me) then
   call MPI_RECV(vrecv,nt,MPI_INTEGER,sender,tag,comm,statux,ier)
 end if
 if (sender==me) then
   call MPI_SEND(vsend,nt,MPI_INTEGER,recever,tag,comm,ier)
 end if
#endif

end subroutine xmpi_exch_int2d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dp1d
!! NAME
!!  xmpi_exch_dp1d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: double precision one-dimensional arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_dp1d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 real(dp), DEV_CONTARRD intent(in) :: vsend(:)
 real(dp), DEV_CONTARRD intent(inout) :: vrecv(:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: me,my_dt,my_op,tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 !The dimension can be greater than a 32bit integer
 !We use a INT64 to store it. If it is too large, we switch to an
 !alternate routine because MPI<4 doesnt handle 64 bit counts.
 ntot=int(nt,kind=int64)

 if (recever==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_RECV(vrecv,nt,MPI_DOUBLE_PRECISION,sender,tag,comm,statux,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_RECV(vrecv,1,my_dt,sender,tag,comm,statux,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
 if (sender==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(vsend,nt,MPI_DOUBLE_PRECISION,recever,tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(vsend,1,my_dt,recever,tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
#endif

end subroutine xmpi_exch_dp1d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dp2d
!! NAME
!!  xmpi_exch_dp2d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: double precision two-dimensional arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_dp2d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 real(dp), DEV_CONTARRD intent(in) :: vsend(:,:)
 real(dp), DEV_CONTARRD intent(inout) :: vrecv(:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: me,my_dt,my_op,tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 !The dimension can be greater than a 32bit integer
 !We use a INT64 to store it. If it is too large, we switch to an
 !alternate routine because MPI<4 doesnt handle 64 bit counts.
 ntot=int(nt,kind=int64)

 if (recever==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_RECV(vrecv,nt,MPI_DOUBLE_PRECISION,sender,tag,comm,statux,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_RECV(vrecv,1,my_dt,sender,tag,comm,statux,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
 if (sender==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(vsend,nt,MPI_DOUBLE_PRECISION,recever,tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(vsend,1,my_dt,recever,tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
#endif

end subroutine xmpi_exch_dp2d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dp3d
!! NAME
!!  xmpi_exch_dp3d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: double precision three-dimensional arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_dp3d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 real(dp), DEV_CONTARRD intent(in) :: vsend(:,:,:)
 real(dp), DEV_CONTARRD intent(inout) :: vrecv(:,:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: me,my_dt,my_op,tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 !The dimension can be greater than a 32bit integer
 !We use a INT64 to store it. If it is too large, we switch to an
 !alternate routine because MPI<4 doesnt handle 64 bit counts.
 ntot=int(nt,kind=int64)

 if (recever==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_RECV(vrecv,nt,MPI_DOUBLE_PRECISION,sender,tag,comm,statux,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_RECV(vrecv,1,my_dt,sender,tag,comm,statux,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
 if (sender==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(vsend,nt,MPI_DOUBLE_PRECISION,recever,tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(vsend,1,my_dt,recever,tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
#endif

end subroutine xmpi_exch_dp3d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dp4d_tag
!! NAME
!!  xmpi_exch_dp4d_tag
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: double precision four-dimensional arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_dp4d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 real(dp), DEV_CONTARRD intent(in) :: vsend(:,:,:,:)
 real(dp), DEV_CONTARRD intent(inout) :: vrecv(:,:,:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: me,my_dt,my_op,tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 !The dimension can be greater than a 32bit integer
 !We use a INT64 to store it. If it is too large, we switch to an
 !alternate routine because MPI<4 doesnt handle 64 bit counts.
 ntot=int(nt,kind=int64)

 if (recever==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_RECV(vrecv,nt,MPI_DOUBLE_PRECISION,sender,tag,comm,statux,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_RECV(vrecv,1,my_dt,sender,tag,comm,statux,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
 if (sender==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(vsend,nt,MPI_DOUBLE_PRECISION,recever,tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(vsend,1,my_dt,recever,tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
#endif

end subroutine xmpi_exch_dp4d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dp5d_tag
!! NAME
!!  xmpi_exch_dp5d_tag
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: double precision five-dimensional arrays.
!!
!! INPUTS
!!  mtag= message tag
!!  nt= vector length
!!  vsend= send buffer
!!  sender= node sending the data
!!  recever= node receiving the data
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  vrecv= receive buffer
!!
!! SOURCE

subroutine xmpi_exch_dp5d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 real(dp), DEV_CONTARRD intent(in) :: vsend(:,:,:,:,:)
 real(dp), DEV_CONTARRD intent(inout) :: vrecv(:,:,:,:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: me,my_dt,my_op,tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.nt==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag,xmpi_tag_ub)

 !The dimension can be greater than a 32bit integer
 !We use a INT64 to store it. If it is too large, we switch to an
 !alternate routine because MPI<4 doesnt handle 64 bit counts.
 ntot=int(nt,kind=int64)

 if (recever==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_RECV(vrecv,nt,MPI_DOUBLE_PRECISION,sender,tag,comm,statux,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_RECV(vrecv,1,my_dt,sender,tag,comm,statux,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
 if (sender==me) then
   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(vsend,nt,MPI_DOUBLE_PRECISION,recever,tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(vsend,1,my_dt,recever,tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if
 end if
#endif

end subroutine xmpi_exch_dp5d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_spc1d
!! NAME
!!  xmpi_exch_spc1d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: one-dimensional single precision complex arrays.
!!
!! SOURCE

subroutine xmpi_exch_spc1d(vsend,n1,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,n1
 complex(spc), DEV_CONTARRD intent(in) :: vsend(:)
 complex(spc), DEV_CONTARRD intent(inout) :: vrecv(:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: tag,me
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.(n1==0)) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 if (recever==me) then
   call MPI_RECV(vrecv,n1,MPI_COMPLEX,sender, tag,comm,statux,ier)
 end if
 if (sender==me) then
   call MPI_SEND(vsend,n1,MPI_COMPLEX,recever,tag,comm,ier)
 end if
#endif

end subroutine xmpi_exch_spc1d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dpc1d
!! NAME
!!  xmpi_exch_dpc1d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: one-dimensional double precision complex arrays.
!!
!! SOURCE

subroutine xmpi_exch_dpc1d(vsend,n1,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,n1
 complex(dpc), DEV_CONTARRD intent(in) :: vsend(:)
 complex(dpc), DEV_CONTARRD intent(inout) :: vrecv(:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: tag,me
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.n1==0) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 if (recever==me) then
   call MPI_RECV(vrecv,n1,MPI_DOUBLE_COMPLEX,sender, tag,comm,statux,ier)
 end if
 if (sender==me) then
   call MPI_SEND(vsend,n1,MPI_DOUBLE_COMPLEX,recever,tag,comm,ier)
 end if
#endif

end subroutine xmpi_exch_dpc1d
!!***

!--------------------------------------------------------------------

!!****f* ABINIT/xmpi_exch_dpc2d
!! NAME
!!  xmpi_exch_dpc2d
!!
!! FUNCTION
!!  Sends and receives data.
!!  Target: two-dimensional double precision complex arrays.
!!
!! SOURCE

subroutine xmpi_exch_dpc2d(vsend,nt,sender,vrecv,recever,comm,mtag,ier)

!Arguments----------------
 integer,intent(in) :: mtag,nt
 complex(dpc), DEV_CONTARRD intent(in) :: vsend(:,:)
 complex(dpc), DEV_CONTARRD intent(inout) :: vrecv(:,:)
 integer,intent(in) :: sender,recever,comm
 integer,intent(out) :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: statux(MPI_STATUS_SIZE)
 integer :: tag,me
#endif
! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (sender==recever.or.comm==MPI_COMM_NULL.or.(nt==0)) return
 call MPI_COMM_RANK(comm,me,ier)
 tag = MOD(mtag, xmpi_tag_ub)

 if (recever==me) then
   call MPI_RECV(vrecv,nt,MPI_DOUBLE_COMPLEX,sender, tag,comm,statux,ier)
 end if
 if (sender==me) then
   call MPI_SEND(vsend,nt,MPI_DOUBLE_COMPLEX,recever,tag,comm,ier)
 end if
#endif

end subroutine xmpi_exch_dpc2d
!!***
