!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_min_intv
!! NAME
!!  xmpi_min_intv
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine,
!!  if we compile the code using the MPI  CPP flags.
!!  xmpi_min is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2024 ABINIT group (AR,XG,MB)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce
!!
!! SOURCE

subroutine xmpi_min_intv(xval,xmin,comm,ier)

!Arguments-------------------------
 integer ,intent(in) :: xval
 integer ,intent(out) :: xmin
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: arr_xval(1),arr_xmin(1)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   arr_xval(1) = xval
   call MPI_ALLREDUCE(arr_xval,arr_xmin,1,MPI_INTEGER,MPI_MIN,comm,ier)
   xmin = arr_xmin(1)
 else
#endif
   xmin=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_min_intv
!!***

!!****f* ABINIT/xmpi_min_dpv
!! NAME
!!  xmpi_min_dpv
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar double precisions.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xmin= number of elements in send buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce
!!
!! SOURCE

subroutine xmpi_min_dpv(xval,xmin,comm,ier)

!Arguments-------------------------
 real(dp),intent(in) :: xval
 real(dp),intent(out) :: xmin
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 real(dp) :: arr_xval(1),arr_xmin(1)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   arr_xval(1) = xval
   call MPI_ALLREDUCE(arr_xval,arr_xmin,1,MPI_DOUBLE_PRECISION,MPI_MIN,comm,ier)
   xmin = arr_xmin(1)
 else
#endif
   xmin=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_min_dpv
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_min_int1d
!! NAME
!!  xmpi_min_int1d
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: 1d int array, in-place version
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_min_int1d(xval, comm, ier)

!Arguments-------------------------
 integer,intent(inout) :: xval(:)
 integer,intent(in) :: comm
 integer,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: arr_xmin(size(xval))
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(xval, arr_xmin, size(xval), MPI_INTEGER, MPI_MIN, comm, ier)
   xval = arr_xmin
 end if
#endif

end subroutine xmpi_min_int1d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_min_dp
!! NAME
!!  xmpi_min_dp
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: scalar double precisions, in-place version
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_min_dp(xval, comm, ier)

!Arguments-------------------------
 real(dp),intent(inout) :: xval
 integer ,intent(in) :: comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 real(dp) :: arr_xval(1), arr_xmin(1)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   arr_xval(1) = xval
   call MPI_ALLREDUCE(arr_xval,arr_xmin,1,MPI_DOUBLE_PRECISION,MPI_MIN,comm,ier)
   xval = arr_xmin(1)
 end if
#endif

end subroutine xmpi_min_dp
!!***
