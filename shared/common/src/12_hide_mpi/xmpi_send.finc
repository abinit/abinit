!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_send
!! NAME
!!  xmpi_send
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine MPI_SEND,
!!  to send data from one processor to another,
!!  if we compile the code using the MPI CPP flags.
!!  xmpi_send is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2024 ABINIT group
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! SOURCE
!!***

!!****f* ABINIT/xmpi_send_char
!! NAME
!!  xmpi_send_char
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: character.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_char(xval,dest,tag,comm,ier)

!Arguments-------------------------
 character(len=*),intent(inout),target :: xval  
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_tag
 character,pointer :: arr_xval(:)
 type(c_ptr) :: cptr
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   my_tag = MOD(tag,xmpi_tag_ub)
   cptr=c_loc(xval) ; call c_f_pointer(cptr,arr_xval,[len(xval)])
   call MPI_SEND(arr_xval,len(xval),MPI_CHARACTER,dest,my_tag,comm,ier)
 end if
#endif

end subroutine xmpi_send_char
!!***

!!****f* ABINIT/xmpi_send_intv
!! NAME
!!  xmpi_send_intv
!!
!! FUNCTION
!!  Sends data from one processor to another.
!!  Target: single integer.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_intv(xval,dest,tag,comm,ier)

!Arguments-------------------------
 integer,intent(inout) :: xval
 integer,intent(in) :: dest,tag,comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_tag
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_SEND([xval],1,MPI_INTEGER,dest,my_tag,comm,ier)
 end if
#endif

 end subroutine xmpi_send_intv

!!***

!!****f* ABINIT/xmpi_send_int1d
!! NAME
!!  xmpi_send_int1d
!!
!! FUNCTION
!!  Sends data from one processor to another.
!!  Target: integer one-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_int1d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 integer, DEV_CONTARRD intent(inout) :: xval(:)
 integer,intent(in) :: dest,tag,comm
 integer,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_tag, n1
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_SEND(xval,n1,MPI_INTEGER,dest,my_tag,comm,ier)
 end if
#endif

 end subroutine xmpi_send_int1d
!!***

!!****f* ABINIT/xmpi_send_int2d
!! NAME
!!  xmpi_send_int2d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: integer two-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_send
!!
!! SOURCE
subroutine xmpi_send_int2d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 integer,intent(inout) :: xval(:,:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_dt,my_op,n1,n2,my_tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   my_tag = MOD(tag,xmpi_tag_ub)

   !This product of dimensions can be greater than a 32bit integer
   !We use a INT64 to store it. If it is too large, we switch to an
   !alternate routine because MPI<4 doesnt handle 64 bit counts.
   ntot=int(n1*n2,kind=int64)

   if (ntot<=xmpi_maxint32_64) then
    call MPI_SEND(xval,n1*n2,MPI_INTEGER,dest,my_tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_INTEGER,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(xval,1,my_dt,dest,my_tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if

 end if
#endif

end subroutine xmpi_send_int2d
!!***

!!****f* ABINIT/xmpi_send_int3d
!! NAME
!!  xmpi_send_int3d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: integer three-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_send
!!
!! SOURCE

subroutine xmpi_send_int3d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 integer,intent(inout) :: xval(:,:,:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_dt,my_op,n1,n2,n3,my_tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   n3=size(xval,dim=3)
   my_tag = MOD(tag,xmpi_tag_ub)

   !This product of dimensions can be greater than a 32bit integer
   !We use a INT64 to store it. If it is too large, we switch to an
   !alternate routine because MPI<4 doesnt handle 64 bit counts.
   ntot=int(n1*n2*n3,kind=int64)

   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(xval,n1*n2*n3,MPI_INTEGER,dest,my_tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_INTEGER,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(xval,1,my_dt,dest,my_tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if

 end if
#endif

end subroutine xmpi_send_int3d
!!***

!!****f* ABINIT/xmpi_send_dp
!! NAME
!!  xmpi_send_dp
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision value.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_dp(xval,dest,tag,comm,ier)

!Arguments-------------------------
 real(dp), DEV_CONTARRD intent(inout) :: xval
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_tag
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_SEND([xval],1,MPI_DOUBLE_PRECISION,dest,my_tag,comm,ier)
 end if
#endif

end subroutine xmpi_send_dp
!!***

!!****f* ABINIT/xmpi_send_dp1d
!! NAME
!!  xmpi_send_dp1d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision one-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_dp1d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 real(dp), DEV_CONTARRD intent(inout) :: xval(:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,my_tag
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_SEND(xval,n1,MPI_DOUBLE_PRECISION,dest,my_tag,comm,ier)
 end if
#endif

end subroutine xmpi_send_dp1d
!!***

!!****f* ABINIT/xmpi_send_dp2d
!! NAME
!!  xmpi_send_dp2d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision two-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_dp2d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 real(dp), DEV_CONTARRD intent(inout) :: xval(:,:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_dt,my_op,n1,n2,my_tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   my_tag = MOD(tag,xmpi_tag_ub)

   !This product of dimensions can be greater than a 32bit integer
   !We use a INT64 to store it. If it is too large, we switch to an
   !alternate routine because MPI<4 doesnt handle 64 bit counts.
   ntot=int(n1*n2,kind=int64)

   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(xval,n1*n2,MPI_DOUBLE_PRECISION,dest,my_tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(xval,1,my_dt,dest,my_tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if

 end if
#endif

end subroutine xmpi_send_dp2d
!!***

!!****f* ABINIT/xmpi_send_dp3d
!! NAME
!!  xmpi_send_dp3d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision three-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_dp3d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 real(dp), DEV_CONTARRD intent(inout) :: xval(:,:,:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_dt,my_op,n1,n2,n3,my_tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   n3=size(xval,dim=3)
   my_tag = MOD(tag,xmpi_tag_ub)

   !This product of dimensions can be greater than a 32bit integer
   !We use a INT64 to store it. If it is too large, we switch to an
   !alternate routine because MPI<4 doesnt handle 64 bit counts.
   ntot=int(n1*n2*n3,kind=int64)

   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(xval,n1*n2*n3,MPI_DOUBLE_PRECISION,dest,my_tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(xval,1,my_dt,dest,my_tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if

 end if
#endif

end subroutine xmpi_send_dp3d
!!***
!

!!****f* ABINIT/xmpi_send_dp4d
!! NAME
!!  xmpi_send_dp4d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision four-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  comm :: MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_send_dp4d(xval,dest,tag,comm,ier)

!Arguments-------------------------
 real(dp), DEV_CONTARRD intent(inout) :: xval(:,:,:,:)
 integer ,intent(in) :: dest,tag,comm
 integer ,intent(out) :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: my_dt,my_op,n1,n2,n3,n4,my_tag
 integer(kind=int64) :: ntot
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   n3=size(xval,dim=3)
   n4=size(xval,dim=4)
   my_tag = MOD(tag,xmpi_tag_ub)

   !This product of dimensions can be greater than a 32bit integer
   !We use a INT64 to store it. If it is too large, we switch to an
   !alternate routine because MPI<4 doesnt handle 64 bit counts.
   ntot=int(n1*n2*n3*n4,kind=int64)

   if (ntot<=xmpi_maxint32_64) then
     call MPI_SEND(xval,n1*n2*n3*n4,MPI_DOUBLE_PRECISION,dest,my_tag,comm,ier)
   else
     call xmpi_largetype_create(ntot,MPI_DOUBLE_PRECISION,my_dt,my_op,MPI_OP_NULL)
     call MPI_SEND(xval,1,my_dt,dest,my_tag,comm,ier)
     call xmpi_largetype_free(my_dt,my_op)
   end if

 end if
#endif

end subroutine xmpi_send_dp4d
!!***
!
