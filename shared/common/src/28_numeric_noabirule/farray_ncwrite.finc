! NOTE: This code has been generated by genarray.py
subroutine farr_real_dp1(farray, varname, ncid)

 implicit none

!Arguments ------------------------------------
 integer,intent(in) :: ncid
 character(len=*),intent(in) :: varname
 real(dp),intent(in) :: farray(:)

!Local variables-------------------------------
!scalars
#ifdef HAVE_NETCDF
 integer :: dimval,ii,varid
 character(len=nctk_slen) :: dimname,shape_str   

! *********************************************************************

! Define dimensions.
! Use *private* names for dimensions to avoid possible name collisions.
! if varname is "foo", we use "__foo_dim1__", __foo_dim2__" for name of the dimensions
 NCF_CHECK(nctk_set_datamode(ncid))
 
 shape_str = ""
 do ii=1,size(shape(farray))
   dimval = size(farray, dim=ii)
   if (ii == 1) dimval = size(farray, dim=ii) * 1
   write(dimname,"(3a,i0,a)")"__",trim(varname),"_dim",ii,"__"

   NCF_CHECK(nctk_def_dims(ncid, nctkdim_t(dimname, dimval)))
   shape_str = trim(shape_str) // ", " // dimname 
 end do

 ! Define the variable.
 NCF_CHECK(nctk_def_arrays(ncid, nctkarr_t(varname, 'dp', shape_str)))
 varid = nctk_idname(ncid, varname)

 ! Write data
 NCF_CHECK(nctk_set_datamode(ncid))
 NCF_CHECK(nf90_put_var(ncid, varid, farray))

#else 
 ABI_ERROR("netcdf support is not activated.")
#endif

end subroutine farr_real_dp1

!--------------------------------------------------------------------------------
subroutine farr_complex_dpc1(farray, varname, ncid)

 implicit none

!Arguments ------------------------------------
 integer,intent(in) :: ncid
 character(len=*),intent(in) :: varname
 complex(dpc),intent(in) :: farray(:)

!Local variables-------------------------------
!scalars
#ifdef HAVE_NETCDF
 integer :: dimval,ii,varid
 character(len=nctk_slen) :: dimname,shape_str   

! *********************************************************************

! Define dimensions.
! Use *private* names for dimensions to avoid possible name collisions.
! if varname is "foo", we use "__foo_dim1__", __foo_dim2__" for name of the dimensions
 NCF_CHECK(nctk_set_datamode(ncid))
 
 shape_str = ""
 do ii=1,size(shape(farray))
   dimval = size(farray, dim=ii)
   if (ii == 1) dimval = size(farray, dim=ii) * 2
   write(dimname,"(3a,i0,a)")"__",trim(varname),"_dim",ii,"__"

   NCF_CHECK(nctk_def_dims(ncid, nctkdim_t(dimname, dimval)))
   shape_str = trim(shape_str) // ", " // dimname 
 end do

 ! Define the variable.
 NCF_CHECK(nctk_def_arrays(ncid, nctkarr_t(varname, 'dp', shape_str)))
 varid = nctk_idname(ncid, varname)

 ! Write data
 NCF_CHECK(nctk_set_datamode(ncid))
 NCF_CHECK(nf90_put_var(ncid, varid, c2r(farray)))

#else 
 ABI_ERROR("netcdf support is not activated.")
#endif

end subroutine farr_complex_dpc1

