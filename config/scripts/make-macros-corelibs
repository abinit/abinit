#!/usr/bin/env python
#
# Copyright (C) 2005-2022 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#
from __future__ import print_function, division, absolute_import #, unicode_literals

try:
    from ConfigParser import ConfigParser,NoOptionError
except ImportError:
    from configparser import ConfigParser,NoOptionError
from time import gmtime,strftime

try:
    from commands import getoutput 
except:
    from subprocess import getoutput
import os
import re
import sys

class MyConfigParser(ConfigParser):

  def optionxform(self,option):
    return str(option)

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Macro header
def macro_header(name,stamp):

  return """# Generated by %s on %s

#
# Info to be made available for the core libraries of ABINIT
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the %s
# script. If you try to edit it, your changes will systematically be
# overwritten.
#



# ABI_CORELIBS_INIT()
# -------------------
#
# Sets all variables needed to handle the core libraries.
#
AC_DEFUN([ABI_CORELIBS_INIT],[
  dnl Set include dirs
@INCDIRS@
  dnl Substitute variables
@SUBSTS@
]) # ABI_CORELIBS_INIT
""" % (name,stamp,name)



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-macros-corelibs"
my_configs = ["config/specs/corelibs.conf"]
my_output  = "config/m4/auto-corelibs.m4"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/98_main/abinit.F90") ):
  print("%s: You must be in the top of an ABINIT source tree." % my_name)
  print("%s: Aborting now." % my_name)
  sys.exit(1)

# Read config file(s)
for cnf_file in my_configs:
  if ( os.path.exists(cnf_file) ):
    if ( re.search(r"\.cf$",cnf_file) ):
      exec(compile(open(cnf_file).read(), cnf_file, 'exec'))
  else:
    print("%s: Could not find config file (%s)." % (my_name,cnf_file))
    print("%s: Aborting now." % my_name)
    sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Init
cnf = MyConfigParser()
cnf.read(my_configs[0])
abinit_corelibs = cnf.sections()
abinit_corelibs.sort()

# Init output
inc = ""
sub = ""

# Process special include dirs
inc_blocks = {
    "common":"shared/common/src",
    "core":"src",
    "libpaw":"shared/libpaw",
}
for block, subdir in inc_blocks.items():
  inc += "  src_%s_fcflags='" % block
  for incdir in ["incs", "mods"]:
    inc += " -I$(top_builddir)/{path} -I$(top_srcdir)/{path}".format(
      path=os.path.join(subdir, incdir))
  inc += "'\n"
  sub += "  AC_SUBST(src_%s_fcflags)\n" % (block)

# Process libraries
for lib in abinit_corelibs:
  if ( cnf.get(lib, "parent") == "common" ):
    par_dir = "shared/common/src/%s" % lib
  elif ( cnf.get(lib, "parent") == "libpaw" ):
    par_dir = "shared/libpaw/src"
  else:
    par_dir = "src/%s" % lib

  inc += "  src_{name}_fcflags='-I$(top_builddir)/{path} -I$(top_srcdir)/{path}'\n".format(
    name=lib, path=par_dir)
  sub += "  AC_SUBST(src_%s_fcflags)\n" % (lib)

# Update macro
mac = macro_header(my_name,now)
mac = re.sub("@INCDIRS@",inc,mac)
mac = re.sub("@SUBSTS@",sub,mac)

# Finish
m4 = open(my_output,"wt")
m4.write(mac)
m4.close()

tmp = getoutput("./config/scripts/add-header-typed Autoconf %s" % (my_output))
if ( tmp != "" ):
  print(tmp)
